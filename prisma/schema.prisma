// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Waitlist {
  id                    String    @id @default(uuid()) @map("_id") @db.Uuid
  firstName             String
  lastName              String
  email                 String    @unique
  zipCode               String
  phoneNumber           String?
  monthlyMortgageAmount String?
  mortgageOriginator    String?
  maritalStatus         String?
  employmentStatus      String?
  homeType              String?
  referralCode          String?   @unique
  referredBy            String?
  inviteSent            Boolean   @default(false)
  inviteSentAt          DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("WaitList")
}

model User {
  id            String        @id @default(uuid()) @db.Uuid
  name          String?
  email         String        @unique
  emailVerified DateTime?
  password      String?
  first_name    String?
  last_name     String?
  date_of_birth String?
  phone_number  String?
  image         String?
  userStatus    userStatus    @default(Unauthorized)
  address       userAddress[]

  citizenship citizen @default(US)
  tin         String?

  account AccountApplication[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  application_id String? @unique

  addresses         Address[]
  Session           Session[]
  tp_communications tp_communications[]
  CardApplication   CardApplication?
  AdminUser         AdminUser?
  PersonApplication PersonApplication[]
  Account           Account?

  vendorId     String?
  Vendor       Vendor?       @relation(fields: [vendorId], references: [id])
  VendorAdmins VendorAdmins?

  userDependents      UserDependents[]
  revolvingAccounts   RevolvingAccounts[]
  installmentAccounts InstallmentAccounts[]
  Inquiries           Inquiries[]
  creditReports       CreditReport[]

  @@map("user")
}

enum userStatus {
  Authorized
  Unauthorized
}

model AdminUser {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @unique @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("admin_users")
}

model Account {
  userId            String  @unique @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("account")
}

model Session {
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("session")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([identifier, token])
  @@map("verification_token")
}

model CardApplication {
  id                     String   @id @default(cuid())
  userId                 String   @unique @db.Uuid
  user                   User     @relation(fields: [userId], references: [id])
  status                 String
  currentAddressId       String?  @db.Uuid
  currentAddress         Address? @relation("CurrentAddress", fields: [currentAddressId], references: [id])
  mortgageAddressId      String?  @db.Uuid
  mortgageAddress        Address? @relation("MortgageAddress", fields: [mortgageAddressId], references: [id])
  employmentStatus       String?
  companyName            String?
  jobTitle               String?
  annualIncome           Float?
  mortgageAmount         Float?
  yearMortgageOriginated Int?
  ssid                   String?

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  PersonApplication PersonApplication[]

  @@map("card_application")
}

model Address {
  id        String   @id @default(uuid()) @map("_id") @db.Uuid
  userId    String   @db.Uuid
  address1  String
  address2  String
  city      String
  state     String
  zipCode   String
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  currentAddress    CardApplication[]   @relation("CurrentAddress")
  mortgageAddress   CardApplication[]   @relation("MortgageAddress")
  personApplication PersonApplication[]

  MortgageProperty     MortgageProperty?
  PropertyData         PropertyData?
  RentCastPropertyData RentCastPropertyData?

  @@map("address")
}

model PersonApplication {
  id                  String          @id @default(uuid()) @db.Uuid
  tp_person_id        String?
  application_id      String?
  userId              String          @db.Uuid
  user                User            @relation(fields: [userId], references: [id])
  cardApplicationId   String
  cardApplication     CardApplication @relation(fields: [cardApplicationId], references: [id])
  first_name          String
  last_name           String
  email_address       String
  bank_data           Json?
  citizenship         citizen
  date_of_birth       String
  document_ids        String[]
  middle_name         String?
  occupation          String?
  phone_number        String
  mailing_address     Json?
  physical_address_id String          @db.Uuid
  physical_address    Address?        @relation(fields: [physical_address_id], references: [id])

  userData   Json?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("person_applications")
}

model userAddress {
  id            String    @id @default(uuid()) @db.Uuid
  userId        String    @db.Uuid
  address_type  addr_type @default(Physical)
  street_line_1 String
  street_line_2 String?
  city          String
  state         String
  postal_code   String
  country       String
  user          User      @relation(fields: [userId], references: [id])

  @@unique([userId, address_type])
}

model accountProduct {
  id                 String               @unique
  description        String?
  // account     AccountApplication[]
  AccountApplication AccountApplication[]
}

model AccountApplication {
  id                            String @id @unique
  userId                        String @db.Uuid
  account_product_id            String
  accountType                   String
  primary_person_application_id String
  status                        String
  ownership_type                String
  person_applications           Json

  business_application_id       String?
  account_id                    String?
  product                       String?
  account_number                String?
  deposit_id                    String?
  account_number_reservation_id String?

  created_at DateTime
  updated_at DateTime

  bankdata         Json?
  userdata         Json?
  // accountProduct accountProduct @relation(fields: [account_product_id], references: [id])
  user             User            @relation(fields: [userId], references: [id])
  accountProduct   accountProduct? @relation(fields: [accountProductId], references: [id])
  accountProductId String?

  @@map("account_applications")
}

enum citizen {
  US
}

enum addr_type {
  Physical
  Mailing
}

model tp_communications {
  id         String  @id @default(uuid()) @db.Uuid
  userId     String? @db.Uuid // might be null if it's a system request not the user, like retreve all ...
  method     String
  url        String
  request    Json? //body, null for get
  res_status Int
  responce   Json //body

  created_at DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])
}

// 
model Vendor {
  id             String         @id @default(uuid()) //@db.Uuid
  CompanyName    String
  PhoneNumber    String
  Website        String?
  Industry       String?
  CompanyDetails String?
  User           User[]
  VendorAdmins   VendorAdmins[]

  createdAt DateTime @default(now()) // when we check the score
  updatedAt DateTime @updatedAt

  @@map("vendor")
}

model VendorAdmins {
  id       String @id @default(uuid()) @db.Uuid
  userId   String @unique @db.Uuid
  vendorId String

  Vendor Vendor @relation(fields: [vendorId], references: [id])
  User   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("vendor_admins")
}

model CreditReport {
  id             String @id @default(uuid()) @db.Uuid
  userId         String @db.Uuid
  User           User   @relation(fields: [userId], references: [id])
  reportProvider String
  pulledOn       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ficoScore              Int
  name                   String
  alsoKnownAs            String
  generationalIdentifier String
  yearOfBirth            String

  revolvingAccounts   RevolvingAccounts[]
  installmentAccounts InstallmentAccounts[]
  addresses           CreditReportAddresses[]

  @@map("credit_reports")
}

model CreditReportAddresses {
  id             String       @id @default(uuid()) @db.Uuid
  creditReportId String       @db.Uuid
  CreditReport   CreditReport @relation(fields: [creditReportId], references: [id])

  addressType String
  street      String
  city        String
  state       String
  zipCode     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("credit_report_addresses")
}

model RevolvingAccounts {
  id             String       @id @default(uuid()) @db.Uuid
  userId         String       @db.Uuid
  User           User         @relation(fields: [userId], references: [id])
  creditReportId String       @db.Uuid
  CreditReport   CreditReport @relation(fields: [creditReportId], references: [id])
  creditor       String
  balance        Float
  balanceUpdated String
  creditLimit    Float
  creditUsage    Float

  accountNumber    String
  openClosedStatus String
  dateOpened       String
  accountType      String

  accountStatus   String
  statusUpdated   String
  highestBalance  Float
  monthlyPayment  Float
  lastPaymentDate String

  responsibility   String
  terms            String
  companySold      String
  originalCreditor String
  comments         String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  paymentHistory RevolvingAccountPaymentHistory[]

  @@map("revolving_accounts")
}

model RevolvingAccountPaymentHistory {
  id                 String @id @default(uuid()) @db.Uuid
  revolvingAccountId String @db.Uuid

  period        String
  paymentStatus String

  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  RevolvingAccounts   RevolvingAccounts? @relation(fields: [revolvingAccountsId], references: [id])
  revolvingAccountsId String?            @db.Uuid

  @@map("revolving_account_payment_history")
}

model InstallmentAccounts {
  id             String       @id @default(uuid()) @db.Uuid
  userId         String       @db.Uuid
  User           User         @relation(fields: [userId], references: [id])
  creditReportId String       @db.Uuid
  CreditReport   CreditReport @relation(fields: [creditReportId], references: [id])

  creditor        String
  loanType        String
  balance         Float
  balanceUpdated  String
  originalBalance Float
  paidOffPercent  Float

  accountNumber    String
  openClosedStatus String
  dateOpened       String
  accountType      String

  accountStatus   String
  statusUpdated   String
  monthlyPayment  Float
  lastPaymentDate String

  responsibility   String
  terms            String
  companySold      String
  originalCreditor String
  comments         String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  paymentHistory InstallmentLoanPaymentHistory[]

  @@map("installment_accounts")
}

model InstallmentLoanPaymentHistory {
  id                   String              @id @default(uuid()) @db.Uuid
  installmentAccountId String              @db.Uuid
  installmentAccount   InstallmentAccounts @relation(fields: [installmentAccountId], references: [id])

  period        String
  paymentStatus String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("installment_account_payment_history")
}

// model Collections {}

model Inquiries {
  id     String @id @default(uuid()) //@db.Uuid
  userId String @db.Uuid
  User   User   @relation(fields: [userId], references: [id])

  creditor     String
  inquiryDate  String
  removalDate  String
  businessType String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("inquiries")
}

// model PublicRecords {}

model MortgageProperty {
  id        String  @id @default(uuid()) @db.Uuid
  addressId String  @unique @db.Uuid
  Address   Address @relation(fields: [addressId], references: [id])

  LoanAmount    Int //Decimal
  AmountPaidOff Int? //Decimal
  HomeEquity    Int? //Decimal
  InterestRate  Int? //Decimal

  createdAt DateTime @default(now()) // when we check the score
  updatedAt DateTime @updatedAt
}

model PropertyData {
  id        String  @id @default(uuid()) @db.Uuid
  addressId String  @unique @db.Uuid
  Address   Address @relation(fields: [addressId], references: [id])

  homeType         String
  yearBuilt        String?
  lotSize          String?
  lastRemodel      String?
  liveableSpace    String?
  parkingSpace     String?
  propertyFeatures String?

  bedrooms     Int?
  bathrooms    Int? // Decimal
  garage       Boolean?
  driveway     String?
  pool_Jacuzzi Boolean?
  appliances   Json?
  fireplace    Boolean?
  floors       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("property_data")
}

model UserDependents {
  id     String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid
  User   User   @relation(fields: [userId], references: [id])

  relationToUser String
  age            Int?
  gender         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_dependents")
}

model RentCastPropertyData {
  id               String   @id @default(uuid()) @db.Uuid
  addressId        String   @unique @db.Uuid
  Address          Address  @relation(fields: [addressId], references: [id])
  rentCastId       String
  formattedAddress String
  addressLine1     String
  addressLine2     String
  city             String
  state            String
  zipCode          String
  county           String
  latitude         Float
  longitude        Float
  propertyType     String
  bedrooms         Int
  bathrooms        Int
  squareFootage    Int
  lotSize          Int
  yearBuilt        Int
  assessorId       String
  legalDescription String
  subdivision      String
  zoning           String
  lastSaleDate     DateTime
  lastSalePrice    Float
  features         Json
  taxAssessments   Json
  propertyTaxes    Json
  owner            Json
  ownerOccupied    Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("rent_cast_address_data")
}
