// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Waitlist {
  id                    String    @id @default(uuid()) @map("_id") @db.Uuid
  firstName             String
  lastName              String
  email                 String    @unique
  zipCode               String
  phoneNumber           String?
  monthlyMortgageAmount String?
  mortgageOriginator    String?
  maritalStatus         String?
  employmentStatus      String?
  homeType              String?
  referralCode          String?   @unique
  referredBy            String?
  inviteSent            Boolean   @default(false)
  inviteSentAt          DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("waitlist")
}

model User {
  id              String           @id @default(cuid())
  firstName       String?
  middleInitial   String?
  lastName        String?
  email           String           @unique
  emailVerified   DateTime?
  phoneNumber     String?
  dateOfBirth     DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  cardApplication CardApplication?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  addresses Address[]

  @@map("user")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("account")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("session")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([identifier, token])
  @@map("verification_token")
}

model CardApplication {
  id                     String   @id @default(cuid())
  userId                 String   @unique
  user                   User     @relation(fields: [userId], references: [id])
  status                 String
  currentAddressId       String?  @db.Uuid
  currentAddress         Address? @relation("CurrentAddress", fields: [currentAddressId], references: [id])
  mortgageAddressId      String?  @db.Uuid
  mortgageAddress        Address? @relation("MortgageAddress", fields: [mortgageAddressId], references: [id])
  employmentStatus       String?
  companyName            String?
  jobTitle               String?
  annualIncome           Float?
  mortgageAmount         Float?
  yearMortgageOriginated Int?
  ssid                   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("card_application")
}

model Address {
  id        String   @id @default(uuid()) @map("_id") @db.Uuid
  userId    String
  address1  String
  address2  String
  city      String
  state     String
  zipCode   String
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  currentAddress  CardApplication[] @relation("CurrentAddress")
  mortgageAddress CardApplication[] @relation("MortgageAddress")

  @@map("address")
}
