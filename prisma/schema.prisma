// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Waitlist {
  id                    String    @id @default(uuid()) @map("_id") @db.Uuid
  firstName             String
  lastName              String
  email                 String    @unique
  zipCode               String
  phoneNumber           String?
  monthlyMortgageAmount String?
  mortgageOriginator    String?
  maritalStatus         String?
  employmentStatus      String?
  homeType              String?
  referralCode          String?   @unique
  referredBy            String?
  inviteSent            Boolean   @default(false)
  inviteSentAt          DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("WaitList")
}

model User {
  id            String        @id @default(uuid()) @db.Uuid
  name          String?
  email         String        @unique
  emailVerified DateTime
  password      String?
  first_name    String?
  last_name     String?
  date_of_birth String?
  phone_number  String?
  userStatus    userStatus    @default(Unauthorized)
  address       userAddress[]

  citizenship citizen @default(US)
  tin         String?

  account AccountApplication[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  application_id String? @unique

  addresses         Address[]
  Session           Session[]
  tp_communications tp_communications[]
  CardApplication   CardApplication?
  AdminUser         AdminUser?
  PersonApplication PersonApplication[]

  @@map("user")
}

enum userStatus {
  Authorized
  Unauthorized
}

model AdminUser {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @unique @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("admin_users")
}

// model Account {
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String?
//   access_token      String?
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String?
//   session_state     String?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@id([provider, providerAccountId])
//   @@map("account")
// }

model Session {
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("session")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([identifier, token])
  @@map("verification_token")
}

model CardApplication {
  id                     String   @id @default(cuid())
  userId                 String   @unique @db.Uuid
  user                   User     @relation(fields: [userId], references: [id])
  status                 String
  currentAddressId       String?  @db.Uuid
  currentAddress         Address? @relation("CurrentAddress", fields: [currentAddressId], references: [id])
  mortgageAddressId      String?  @db.Uuid
  mortgageAddress        Address? @relation("MortgageAddress", fields: [mortgageAddressId], references: [id])
  employmentStatus       String?
  companyName            String?
  jobTitle               String?
  annualIncome           Float?
  mortgageAmount         Float?
  yearMortgageOriginated Int?
  ssid                   String?

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  PersonApplication PersonApplication[]

  @@map("card_application")
}

model Address {
  id        String   @id @default(uuid()) @map("_id") @db.Uuid
  userId    String   @db.Uuid
  address1  String
  address2  String
  city      String
  state     String
  zipCode   String
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  currentAddress    CardApplication[]   @relation("CurrentAddress")
  mortgageAddress   CardApplication[]   @relation("MortgageAddress")
  personApplication PersonApplication[]

  @@map("address")
}

model PersonApplication {
  id                  String          @id @default(uuid()) @db.Uuid
  tp_person_id        String?
  application_id      String?
  userId              String          @db.Uuid
  user                User            @relation(fields: [userId], references: [id])
  cardApplicationId   String
  cardApplication     CardApplication @relation(fields: [cardApplicationId], references: [id])
  first_name          String
  last_name           String
  email_address       String
  bank_data           Json?
  citizenship         citizen
  date_of_birth       String
  document_ids        String[]
  middle_name         String?
  occupation          String?
  phone_number        String
  mailing_address     Json?
  physical_address_id String          @db.Uuid
  physical_address    Address?        @relation(fields: [physical_address_id], references: [id])

  userData   Json?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("person_applications")
}

model userAddress {
  id            String    @id @default(uuid()) @db.Uuid
  userId        String    @db.Uuid
  address_type  addr_type @default(Physical)
  street_line_1 String
  street_line_2 String?
  city          String
  state         String
  postal_code   String
  country       String
  user          User      @relation(fields: [userId], references: [id])

  @@unique([userId, address_type])
}

model accountProduct {
  id                 String               @unique
  description        String?
  // account     AccountApplication[]
  AccountApplication AccountApplication[]
}

model AccountApplication {
  id                            String @id @unique
  userId                        String @db.Uuid
  account_product_id            String
  accountType                   String
  primary_person_application_id String
  status                        String
  ownership_type                String
  person_applications           Json

  business_application_id       String?
  account_id                    String?
  product                       String?
  account_number                String?
  deposit_id                    String?
  account_number_reservation_id String?

  created_at DateTime
  updated_at DateTime

  bankdata         Json?
  userdata         Json?
  // accountProduct accountProduct @relation(fields: [account_product_id], references: [id])
  user             User            @relation(fields: [userId], references: [id])
  accountProduct   accountProduct? @relation(fields: [accountProductId], references: [id])
  accountProductId String?

  @@map("account_applications")
}

enum citizen {
  US
}

enum addr_type {
  Physical
  Mailing
}

model tp_communications {
  id         String  @id @default(uuid()) @db.Uuid
  userId     String? @db.Uuid // might be null if it's a system request not the user, like retreve all ...
  method     String
  url        String
  request    Json? //body, null for get
  res_status Int
  responce   Json //body

  created_at DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])
}
